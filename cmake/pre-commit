#!/bin/bash
# stage 1 pre-commit - called right after a cmake configure
set -e
WORK_DIR="@CMAKE_BINARY_DIR@"
CONDA="@CMAKE_BINARY_DIR@/.miniconda/bin/conda"
CONDA_SH="@CMAKE_BINARY_DIR@/.miniconda.sh"
CONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
GIT_HOOKS="@CMAKE_SOURCE_DIR@/.git/hooks"

cd ${WORK_DIR}
if [ ! -f ${CONDA} ] # conda executable in miniconda enviroment missing
then
	if [ ! -f ${CONDA_SH} ]
	then # Have to download Miniconda3
		curl -C - -o ${CONDA_SH} ${CONDA_URL}
		chmod +x ${CONDA_SH}
	fi
	#Install Miniconda3, pre-commit and other tools
	${CONDA_SH} -b -f -p .miniconda
	${CONDA} run pip install pre-commit inquirer
	${CONDA} run conda install -c conda-forge uncrustify git
fi

# Let pre-commit generate its hook (stage 3)
cd @CMAKE_SOURCE_DIR@
${CONDA} run pre-commit install -f --install-hooks
${CONDA} run pre-commit install --hook-type commit-msg
cd -

# Move stage 3 at pre-commit.py
mv ${GIT_HOOKS}/pre-commit ${GIT_HOOKS}/pre-commit.py # Move generated pre-commit

# Create stage 2 hook, wrap/run stage 3 inside conda
cat << EOF > ${GIT_HOOKS}/pre-commit
#!/bin/bash
${CONDA} run python ${GIT_HOOKS}/pre-commit.py
EOF

# Make stage 2 executable
chmod +x ${GIT_HOOKS}/pre-commit

# This time have to call stage 2 explicitly
cd ..
${GIT_HOOKS}/pre-commit
