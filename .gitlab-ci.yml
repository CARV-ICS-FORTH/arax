image: carvicsforth/arch_carv

stages:
  - style
  - build
  - test
  - controller
  - build_all
  - docs
  - publish
  - trigger_deps
  - report
  - release

variables:
  PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
cache:
  key: miniconda
  paths:
    - ${CI_PROJECT_DIR}/mini.tar

.build_base: &build_base
  stage: build
  needs: []

.mutext_utest: &mutext_utest
  stage: test
  needs: [build_mutex]
  dependencies:
    - build_mutex
  retry: 2

.only_master: &only_master
  only:
    refs:
      - master
  except:
    variables:
      - $CI_PIPELINE_SOURCE == "schedule"

style_check:
  stage: style
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  needs: []
  before_script:
    - cd build;tar xf ../mini.tar || true
  script:
    - cmake ../;make pre-commit-all
    - tar --zstd -cf ../mini.tar .miniconda

report_stale_branches:
  stage: report
  needs: []
  script:
    - python ./ci_scripts/report_stale_branches.py
  when: always

build_spin:
  <<: *build_base
  script:
    - mkdir -p build
    - cd build; cmake -DDEBUG=ON -DARAX_CONFIG_FILE="$PWD/../araxconf" -Dasync_architecture=spin ../; make -j 4; cd ../
    - ./ci_scripts/pack.sh 0 . spin
  artifacts:
    paths:
      - spin.tgz
    expire_in: 2 hour
  when: manual

build_mutex:
  <<: *build_base
  script:
    - mkdir -p build
    - cd build; cmake -DCMAKE_BUILD_TYPE=DEBUG -DDEBUG=ON -DARAX_CONFIG_FILE="$PWD/../araxconf" -Dasync_architecture=mutex ../; make -j 4; cd ../
    - ./ci_scripts/pack.sh 0 . mutex
  artifacts:
    paths:
      - mutex.tgz
    expire_in: 24 hour

build_ivshmem:
  <<: *build_base
  script:
    - mkdir -p build
    - cd build; cmake -DDEBUG=ON -DARAX_CONFIG_FILE="$PWD/../araxconf" -Dasync_architecture=ivshmem ../; make -j 4; cd ../
    - ./ci_scripts/pack.sh 0 . ivshmem
  artifacts:
    paths:
      - ivshmem.tgz
    expire_in: 2 hour
  when: manual

build_all:
  stage: build_all
  needs: []
  when: manual
  parallel:
        matrix:
            - ARCH: [spin, mutex, ivshmem]
  script:
    - export gen_art=${ASYNC_ARCH};./tools/build_check.sh ${ASYNC_ARCH}

utest_spin:
  stage: test
  needs: [build_spin]
  script:
    - ./ci_scripts/pack.sh 1 . spin
    - cd build && ctest -V -W
  dependencies:
    - build_spin
  when: manual

utest_mutex:
  <<: *mutext_utest
  when: manual
  script:
    - ulimit -c 0
    - ./ci_scripts/pack.sh 1 . mutex
    - cd build && ctest -V -W

utest_ivshmem:
  stage: test
  needs: [build_ivshmem]
  script:
    - ./ci_scripts/pack.sh 1 . ivshmem
    - cd build && ctest -V -W
  dependencies:
    - build_ivshmem
  when: manual

coverage_mutex:
  <<: *mutext_utest
  script:
    - ./ci_scripts/pack.sh 1 . mutex
    - cd build
    - echo -e "\e[0Ksection_start:`date +%s`:cmake[collapsed=true]\r\e[0KCMake"
    - cmake .. -DCOVERAGE=ON -DBUILD_TESTS=ON
    - echo -e "\e[0Ksection_end:`date +%s`:cmake\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=true]\r\e[0KMake"
    - make -j 4
    - echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"
    - make cov
    - pip install htmlark
    - htmlark -o cov.html ./coverage/coverage.html
  artifacts:
    paths:
      - build/cov.html
    expire_in: 7 Day

pahole:
  <<: *mutext_utest
  script:
    - ./ci_scripts/pack.sh 1 . mutex
    - python ./tools/pahole.py

build_doc:
  <<: *only_master
  stage: build
  needs: []
  script:
    - mkdir -p build
    - cd build
    - cmake ../
    - make doc
    - cd docs
    - mv html AraxDocs
    - zip -gr AraxDocs.zip AraxDocs/*
  artifacts:
    paths:
      - build/docs/AraxDocs.zip
    expire_in: 1 Day

publish_doc:
  <<: *only_master
  stage: publish
  needs: [build_doc]
  allow_failure: true
  script:
    - bash ci_scripts/pub_doc.sh
  dependencies:
    - build_doc

publish_docker:
  stage: publish
  variables:
   DOCKER_ROOT: "${DOCK_HOST}/${CI_PROJECT_NAMESPACE}/"
   DOCKER_TAG: "${CI_BUILD_REF_NAME}"
   BUILDAH_LAYERS: "true"
  needs: [controller]
  script:
    - ./docker/opti_dock.py docker/Dockerfile
  when: manual


package_build:
  <<: *only_master
  stage: build
  needs: []
  script:
    - tar czvf ${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}.tgz *
  artifacts:
    paths:
      - ${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}.tgz
    expire_in: 1 Day

package_publish:
  <<: *only_master
  stage: publish
  needs: [package_build]
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}.tgz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_BUILD_REF_NAME}/${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}.tgz"'
  dependencies:
    - package_build

ubuntu_build:
  stage: publish
  image: "nvidia/cuda:10.1-devel-ubuntu18.04"
  needs: [controller]
  before_script:
    - cd /
    - apt-get update
    - apt-get -qqy install wget
    - apt-get -qqy install git g++ make libssl-dev pkg-config libncursesw5-dev libncurses-dev curl & wget -nv "https://github.com/Kitware/CMake/releases/download/v3.22.3/cmake-3.22.3-linux-x86_64.sh" & wait
    - wget -nv "https://github.com/Kitware/CMake/releases/download/v3.22.3/cmake-3.22.3-linux-x86_64.sh"
    - bash ./cmake-3.22.3-linux-x86_64.sh --skip-license
    - rm cmake-3.22.3-linux-x86_64.sh
    - cd -
  script:
    - cd build
    - cmake -DBUILTINS_PATH='/usr/lib/araxcontroller' -DCMAKE_BUILD_TYPE=Debug ..
    - make -j `nproc` package
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file pkg/*.deb "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_COMMIT_SHORT_SHA}/${CI_BUILD_REF_NAME}/${CI_PROJECT_NAME}.deb"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file pkg/*.sh "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_COMMIT_SHORT_SHA}/${CI_BUILD_REF_NAME}/${CI_PROJECT_NAME}.sh"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file pkg/*.deb "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/latest/${CI_BUILD_REF_NAME}/${CI_PROJECT_NAME}.deb"'

controller:
  stage: test
  needs: []
  variables:
    ARAX_CONF: "shm_file /dev/shm/${CI_JOB_TOKEN}"
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:vtbuild[collapsed=true]\r\e[0KBuild Arax"
    - mkdir -p build
    - cd build
    - cmake .. -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=DEBUG -DJAVA_WRAPS=ON -Dasync_architecture=mutex
    - make -j all noop noop_stress
    - make install
    - cp ../controller/ci/rr_cpu.json ./conf.json
    - echo -e "\e[0Ksection_end:`date +%s`:vtbuild\r\e[0K"
    - make run &
    - sleep 1
    - gdb -batch -ex "set logging on" -ex "run" -ex "bt full" -ex "quit" --args ./noop/noop '!skrow C nialP'
    - ./araxgrind/araxgrind --all
    - java -jar JArax.jar '!skrow avaJ'
    - ./araxgrind/araxgrind --all
    - gdb -batch -ex "set logging on" -ex "run" -ex "bt full" -ex "quit" --args ./noop/noop_stress
    - killall -SIGINT arax_controller
    - sleep 1
  after_script:
    - rm /dev/shm/${CI_JOB_TOKEN}
  retry: 2

trigger_autotalk:
  stage: trigger_deps
  variables:
    ARAX_PKG: "${CI_COMMIT_SHORT_SHA}/${CI_BUILD_REF_NAME}"
  trigger:
    project: accelerators/auto_talk
    branch: ${CI_BUILD_REF_NAME}

trigger_cufft:
  stage: trigger_deps
  variables:
    ARAX_PKG: "${CI_COMMIT_SHORT_SHA}/${CI_BUILD_REF_NAME}"
  trigger:
    project: accelerators/arax_fft
    branch: ${CI_BUILD_REF_NAME}

report:
  stage: report
  script:
    - python ./ci_scripts/report.py
  when: always

release:
  stage: release
  parallel:
    matrix:
      - REPO: ['carvgit.ics.forth.gr:accelerators/internal_release.git']
  script:
    - git config --global user.email "${CI_EMAIL}"
    - git config --global user.name "${CI_USERNAME}"
    - git remote rm origin && git remote add origin git@${REPO}
    - git push origin HEAD:master
