To run unit test you need
yum install check
yum install check-devel
yum install gcov
yum install perf

make;
make test; 
make cov;  

To run single unit test 
./test/(choose one)

To Debug you need some packages
yum  debuginfo-install check-0.12.0-4.fc30.x86_64 glibc-2.29-22.fc30.x86_64 libgcc-9.2.1-1.fc30.x86_64 sssd-client-2.2.2-1.fc30.x86_64 subunit-1.3.0-9.fc30.x86_64

To run gdb you have to options 
set no fork from the aplication

No fork mode 
https://libcheck.github.io/check/doc/check_html/check_4.html#No-Fork-Mode
Check normally forks to create a separate address space. This allows a signal or early exit to be caught and reported, rather than taking down the entire test program, and is normally very useful. However, when you are trying to debug why the segmentation fault or other program error occurred, forking makes it difficult to use debugging tools. To define fork mode for an SRunner object, you can do one of the following:
    Define the CK_FORK environment variable to equal “no”.
    Explicitly define the fork status through the use of the following function:
    void srunner_set_fork_status (SRunner * sr, enum fork_status fstat);
The enum fork_status allows the fstat parameter to assume the following values: CK_FORK and CK_NOFORK. An explicit call to srunner_set_fork_status() overrides the CK_FORK environment variable. 
or
https://sourceware.org/gdb/onlinedocs/gdb/Forks.html 
gdb program
set detach-on-fork off
set follow-fork-mode child 
inferior cheatsheat : https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html
or
CK_FORK=no gdb balbla
